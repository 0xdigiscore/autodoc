{
  "folderName": "langchain",
  "folderPath": ".autodoc/docs/json/src/langchain",
  "url": "https://github.com/context-labs/autodoc/tree/master/.autodoc/docs/json/src/langchain",
  "files": [
    {
      "fileName": "hnswlib.ts",
      "filePath": "src/langchain/hnswlib.ts",
      "url": "https://github.com/context-labs/autodoc/blob/master/src/langchain/hnswlib.ts",
      "summary": "The `HNSWLib` class in the `autodoc` project is a vector store that uses the `hnswlib-node` library to perform similarity searches on vectors. It extends the `SaveableVectorStore` class and provides methods to add documents to the vector store, search for similar vectors, and save and load the vector store from disk.\n\nThe `HNSWLib` class takes an `Embeddings` object and an `HNSWLibArgs` object as arguments in its constructor. The `Embeddings` object is used to embed the text of the documents into vectors. The `HNSWLibArgs` object contains the configuration options for the vector store, including the `space` (which is set to `'cosine'` by default), the number of dimensions in the vectors, an optional `InMemoryDocstore` object to store the documents, and an optional `HierarchicalNSWT` object to use as the index.\n\nThe `addDocuments` method takes an array of `Document` objects, embeds the text of each document into a vector using the `Embeddings` object, and adds the vectors to the vector store using the `addVectors` method.\n\nThe `addVectors` method takes an array of vectors and an array of `Document` objects. It checks that the length of the vectors and documents arrays are the same and that the length of the vectors matches the number of dimensions specified in the `HNSWLibArgs` object. It then adds each vector to the index using the `addPoint` method of the `HierarchicalNSWT` object and adds the corresponding `Document` object to the `InMemoryDocstore` object.\n\nThe `similaritySearchVectorWithScore` method takes a query vector and a number `k` and returns the `k` most similar vectors in the vector store along with their corresponding `Document` objects and similarity scores.\n\nThe `save` method saves the vector store to disk by writing the index, `HNSWLibArgs` object, and `InMemoryDocstore` object to separate files in a specified directory.\n\nThe `load` method loads a saved vector store from disk by reading the index, `HNSWLibArgs` object, and `InMemoryDocstore` object from the files in a specified directory.\n\nThe `fromTexts` and `fromDocuments` methods are convenience methods for creating a new `HNSWLib` object from an array of texts and metadata or an array of `Document` objects, respectively.\n\nOverall, the `HNSWLib` class provides a convenient way to perform similarity searches on vectors and store the corresponding documents in memory or on disk. It can be used in a larger project to implement search functionality based on vector similarity. \n\nExample usage:\n\n```\nimport { Embeddings } from 'langchain/embeddings';\nimport { HNSWLib } from 'autodoc';\n\nconst embeddings = new Embeddings();\nconst hnsw = await HNSWLib.fromTexts(['hello world', 'goodbye world'], [{}, {}], embeddings);\nconst [result1, result2] = await hnsw.similaritySearchVectorWithScore(embeddings.embed('hello'), 1);\nconsole.log(result1.pageContent); // 'hello world'\n```",
      "questions": "1. What is the purpose of this code?\n- This code defines a class called `HNSWLib` which provides methods for adding documents and vectors to an index, performing similarity searches, and saving/loading the index.\n\n2. What external libraries does this code depend on?\n- This code depends on several external libraries including `node:fs/promises`, `node:path`, `hnswlib-node`, `langchain/docstore`, `langchain/embeddings`, and `langchain/vectorstores`.\n\n3. What is the difference between `addDocuments` and `addVectors` methods?\n- The `addDocuments` method takes an array of `Document` objects and adds their embeddings to the index, while the `addVectors` method takes an array of vectors and their corresponding `Document` objects and adds them to the index."
    }
  ],
  "folders": [],
  "summary": "The `HNSWLib` class in the `autodoc` project serves as a vector store that utilizes the `hnswlib-node` library to perform similarity searches on vectors. It extends the `SaveableVectorStore` class and offers methods for adding documents to the vector store, searching for similar vectors, and saving and loading the vector store from disk.\n\nThe class constructor takes an `Embeddings` object and an `HNSWLibArgs` object as arguments. The `Embeddings` object is responsible for embedding the text of the documents into vectors, while the `HNSWLibArgs` object contains configuration options for the vector store, such as the `space` (default is `'cosine'`), the number of dimensions in the vectors, an optional `InMemoryDocstore` object for storing documents, and an optional `HierarchicalNSWT` object to use as the index.\n\nThe `addDocuments` method accepts an array of `Document` objects, embeds the text of each document into a vector using the `Embeddings` object, and adds the vectors to the vector store with the `addVectors` method.\n\nThe `addVectors` method takes an array of vectors and an array of `Document` objects. It verifies that the lengths of the vectors and documents arrays are the same and that the length of the vectors matches the number of dimensions specified in the `HNSWLibArgs` object. It then adds each vector to the index using the `addPoint` method of the `HierarchicalNSWT` object and adds the corresponding `Document` object to the `InMemoryDocstore` object.\n\nThe `similaritySearchVectorWithScore` method receives a query vector and a number `k` and returns the `k` most similar vectors in the vector store, along with their corresponding `Document` objects and similarity scores.\n\nThe `save` method saves the vector store to disk by writing the index, `HNSWLibArgs` object, and `InMemoryDocstore` object to separate files in a specified directory. The `load` method loads a saved vector store from disk by reading the index, `HNSWLibArgs` object, and `InMemoryDocstore` object from the files in a specified directory.\n\nThe `fromTexts` and `fromDocuments` methods are convenience methods for creating a new `HNSWLib` object from an array of texts and metadata or an array of `Document` objects, respectively.\n\nThe `HNSWLib` class provides a convenient way to perform similarity searches on vectors and store the corresponding documents in memory or on disk. It can be integrated into a larger project to implement search functionality based on vector similarity.\n\nExample usage:\n\n```javascript\nimport { Embeddings } from 'langchain/embeddings';\nimport { HNSWLib } from 'autodoc';\n\nconst embeddings = new Embeddings();\nconst hnsw = await HNSWLib.fromTexts(['hello world', 'goodbye world'], [{}, {}], embeddings);\nconst [result1, result2] = await hnsw.similaritySearchVectorWithScore(embeddings.embed('hello'), 1);\nconsole.log(result1.pageContent); // 'hello world'\n```",
  "questions": ""
}